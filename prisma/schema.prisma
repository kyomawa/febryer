// Fichier de sch√©ma Prisma pour MongoDB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  context   String
  alt       String?
  featured  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String?
  pack        String?
  size        String?
  amountTotal Int
  when        String?
  note        String?
  message     String?
  addressLine String?
  postcode    String?
  city        String?
  status      String    @default("pending")
  
  stripePaymentIntentId String? @unique
  stripeStatus          String?
  stripeSessionId       String?
  paymentStatus         String?
  currency              String?
  items        Json?
  
  capturedAt   DateTime?
  canceledAt   DateTime?
  authorizedAt DateTime?
  
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewsCache {
  id        String   @id @map("_id") 
  payload   Json
  updatedAt DateTime @updatedAt @default(now())
}

model Service {
  id        String  @id @map("_id")
  name      String  @unique
  price     Int
  group     String
  order     Int?    @default(0)
  active    Boolean @default(true)
  items     PackItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id     String @id @map("_id")
  label  String
  mult   Float
  order  Int?   @default(0)
}

model Pack {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String    @unique
  name      String
  desc      String?
  active    Boolean   @default(true)
  order     Int?      @default(0)
  items     PackItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PackItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  packId    String  @db.ObjectId
  serviceId String
  order     Int?    @default(0)

  pack      Pack    @relation(fields: [packId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([packId, serviceId])
}

model Tariff {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Int
  features  String
  packSlug  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
